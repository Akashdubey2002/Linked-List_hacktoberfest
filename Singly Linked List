import java.util.*;
class Node{
   int data;
   Node next;
   Node(int data){
       this.data=data;
   }
}
public class Main
{
    Node head;
    //INSERT AT BEGINNING
    public void insertAtBeg(int  x){
        Node n= new Node(x);
        if(head==null)
        head=n;
        else{
            n.next=head;
            head=n;
        }
    }
    //INSERT AT END
    public void insertAtEnd(int x){
        Node n= new Node(x);
        if(head==null)
        head=n;
        else{
            Node temp=head;
            while(temp.next!=null){
                temp=temp.next;
            }
            temp.next=n;
            
        }
    }
    //METHOD TO COUNT NUMBER OF NODE
    public int count(){
        int  c=0;
        Node temp=head;
        while(temp!=null){
            c++;
            temp=temp.next;
        }
        return c;
    }
    //INSERT AT GIVEN POSITION
    public void insertAtPos(int pos, int data){
        Node n= new Node(data);
        if(head==null){
            if(pos>1)
            System.out.println("Invalid position");
            else
            head =n;
        }
        else{
            if(pos>count()+1){
                System.out.println("Invalid position");
            }
            else if(pos==1){
                n.next=head;
                head=n;
            }
            else{
                Node temp = head;
                int c=1;
                while(temp.next!=null){
                    if(c==pos-1)
                    break;
                    c++;
                    temp=temp.next;
                }
                n.next=temp.next;
                temp.next=n;
            }
        }
    }
    //METHOD TO PRINT LINKED LIST
    public void print(){
        Node temp =head;
        while(temp!=null){
            System.out.println(temp.data+" ");
            temp=temp.next;
        }
    }
    //DELETE AT BEGINNING
    public void deleteAtBeg(){
        if(head==null)
        return;
        else{
            Node temp=head;
            head=temp.next;
        }
    }
    //DELETE AT END
    public void deleteAtEnd(){
        if(head==null)
            return;
        else{
            Node temp = head;
            if(temp.next==null){
                head = null;
            }
            else{
                while(temp.next.next!=null){
                    temp = temp.next;
                }
                temp.next = null;
            }
        }
    }
    //DELETE AT GIVEN POSITIION
    public void deleteAtPos(int pos){
        if(head==null)
            return;
        else{
            if(head.next==null){
                if(pos!=1){
                    System.out.println("Invalid position");
                }
                else
                    head=null;
            }
            else{
                int c=1;
                if(pos>count())
                    System.out.println("Invalid position");
                else{
                    Node temp = head;
                    while(temp!=null){
                        if(c==pos-1){
                            break;
                        }
                        c++;
                        temp = temp.next;
                    }
                    temp.next=temp.next.next;
                }
            }
        }
    }
	public static void main(String[] args) {
	    Main obj = new Main();
	    Scanner sc = new Scanner(System.in);
	    int n= sc.nextInt();
		for(int i=0;i<n;i++){
		   int k= sc.nextInt();
       //obj,insertAtBeg(k);
		   obj.insertAtEnd(k);
		}
		//obj.insertAtPos(3,67);
    //obj.deleteAtBeg();
    //obj.deleteAtEnd();
		obj.deleteAtPos(2);
		obj.print();
	}
}
